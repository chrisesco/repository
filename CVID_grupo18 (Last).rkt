#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 188 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 19 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 87 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 86 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 87 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 87 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1           0 7896 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 17 3 75
(4
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";Students:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Christian Escobar F - 1910235"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Juan S Jaramillo R -  1910049"
0 0 24 29 1 #"\n"
0 0 17 3 75 4 0 0 24 29 1 #"\n"
0 0 17 3 75 4 0 0 24 29 1 #"\n"
0 0 17 3 75
(5
 #";;;;;;;;;;BNF grammar specification for the C-VID Language;;;;;;;;;;;"
 #";;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 75 4 0 0 24 29 1 #"\n"
0 0 17 3 75 4 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";<program>     ::= <globales> <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";                  a-program (glob exp)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";<globales>    ::= {<identifier> = <expression>}* (,)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                  globals (ids exps)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";<expression>  ::= <numero>"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                  num-lit(num)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";              ::= <caracter> "
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                  caract-lit(carac)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";              ::= <cadena>"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                  cad-lit(cad)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";              ::= <identifier>"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";                  var-exp(id)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";              ::= x8(<numero>)*"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                  list-base-oct (lista)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";              ::= var {<identifier> = <expression>}*  in expression"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                  dec-var-exp(ids rands body)"
0 0 24 29 1 #"\n"
0 0 17 3 70
(6
 #";              ::= cons {<identifier> = <expression>}* in <expression"
 #">"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";                  cons-exp (ids rands body)  "
0 0 24 29 1 #"\n"
0 0 17 3 73
(7
 #";              ::= unic {<identifier> = <expression>}*(,) in <express"
 #"ion>"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";                  unic-exp (ids rands body)  "
0 0 24 29 1 #"\n"
0 0 17 3 92
(8
 #";              ::= rec {<identifier> ({<identifier>}*(,)) = <expressi"
 #"on>}\xE2\x88\x97 in <expression>"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";                  rec-exp (proc-names ids bodies rec-body) "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 75
(9
 #";              ESTRUCTURAS DE CONTROL                                "
 #"      "
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";              ::= (<expression> <primitive-bin> <expresion>)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                  primapp-exp-bin ( exp prim-bin exp )"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";              ::= (<primitive-unary> <expression>)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                  primapp-exp-una ( prim-un exp)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";              ::= ! (<primitive-three> <vector> <numero> <numero> )"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";                  primapp-exp-three ( prim-three vec num num )"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";              ::= prog({<identificador>}*) <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                  <proc-exp (ids body)>"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";              ::= (<expression> {<expression>}*)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;                 <app-exp proc rands>"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";              "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";              ::= sequence <expression> {;<expression>}* end "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                  sequence-exp (exp exps)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";              ::= mod <identifier> -> <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                  set-exp ( ids rhs-exp ) "
0 0 24 29 1 #"\n"
0 0 17 3 71
(10
 #";              ::= if <expr\xE2\x88\x92bool> then <expression> else <"
 #"expresion> "
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";                  if-exp ( test-expb then-exp else-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 88
(11
 #";              ::= cond {\xE2\x80\x9D[\xE2\x80\x9D <expr-bool> <expre"
 #"ssion> \xE2\x80\x9D]\xE2\x80\x9D } * else <expression> "
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(12
 #";                  cond-exp ( cond-clause )   cond-clause = test-expr"
 #" then-body...+ | else then-body...+ "
) 0 0 24 29 1 #"\n"
0 0 17 3 61
(13
 #";              ::= while <expr\xE2\x88\x92bool> do <expression> done "
 #" "
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";                  while-exp(test body) "
0 0 24 29 1 #"\n"
0 0 17 3 103
(14
 #";              ::= for <identificador> = <expression> ( to | downto )"
 #" <expression > do <expresion> done"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                  Forma 1"
0 0 24 29 1 #"\n"
0 0 17 3 81
(15
 #";              ::= <lista>                     #Comentado en la funci"
 #"on gramatica"
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #";                  expression-lista"
0 0 24 29 1 #"\n"
0 0 17 3 81
(16
 #";<lista>       ::= list({<expression>}*(,))    #Comentado en la funci"
 #"on gramatica"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";                  list ( exps )"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";              ::= vacia"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                  empty-list"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                  Forma 2"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";<expression>  ::= list ({<expression>}*(,))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                  list-exp ( exps )"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";              ::= vacia "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";                  lista-vacia-exp"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";              ::= <vector>"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";                  vector-exp "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";              ::= <registro>"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                  reg-exp "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";              "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";<vector>      ::= vector [{<expresion>}*(;)]"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                  lit-vect ( exps )"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";<registro>    ::= {{<identificador> = <expression>}+ (;)}"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";                  lit-reg  ( id exp ids exps )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";<expression> ::= <expr-bool>"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";                 expression-bool"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";<expr-bool>  ::= true"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                 true-exp"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";             ::= false"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 11 #"  false-exp"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 58
#"      ::= compare(<expression> <pred\342\210\222prim> <expression>)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 42 #"          comp-exp-bool (exp predprim exp)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 61
(17
 #"      ::= <oper\xE2\x88\x92bin\xE2\x88\x92bool> (<expr\xE2\x88\x92boo"
 #"l >, <expr\xE2\x88\x92bool>)"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 43 #"          op-bin-exp-bool (expbool expbool)"
0 0 24 29 1 #"\n"
0 0 17 3 52
(18
 #";             ::= <oper\xE2\x88\x92un\xE2\x88\x92bool> (<expr\xE2\x88"
 #"\x92bool>)"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 29 #"  op-un-bool ( oper expbool )"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";             ::= pred <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";               "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49
#";<pred\342\210\222prim>      ::= < | > | <= | >= | == | <>"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";<oper\342\210\222bin\342\210\222bool>  ::= and|or|xor"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";<oper\342\210\222un\342\210\222bool>   ::= not"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";<primitive-bin>  :=   +"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                    (suma)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";                 :=  ~"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";                    (resta)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                 :=    *"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                    (multip)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                 :=    %"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                    (mod)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";                 :=   /"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                    (div)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";                 := +oc"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                    (sumaoctal)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                 :=  ~oc"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                    (restOctal)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";                 := *oc"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                    (multOctal)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                 := concat"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                    (concat-cadena)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";                 := append "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";                    (append-list)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                 := crear-lista"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                    (cons-lit) "
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                 := ref-vector "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";                    (reference-vector)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";<primitive-unary>    ::=  ++"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                         (add1)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                          --"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                         (sub1)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                     ::=  ++oc"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                         (add1Oct)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                     ::=  --oc"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                         (sub1Oct)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                     ::= len"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                         (len-cad)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                     ::= cab"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                         (cab)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";                     ::= cola"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                         (cdr)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                     ::= lista?"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                         (es-lista?)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                     ::= vacia?"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                         (es-vacia?)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                     ::= isvector?"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                         (vector?)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";                     ::= crear-vector"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";                         (create-vector)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                     ::= isregistro?"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";                         (registro-?)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";<primitive-three> := set-vector"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                    (setter-vector)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                  := set-reg"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";                    (setter-reg)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 5 #"space"
0 0 24 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"#\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"$\""
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"numero"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"numero"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 21 #";; Para los flotantes"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"numero"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; Regla para los flotantes negativos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"numero"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"cadena"
0 0 24 3 2 #" ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 5 #" ))) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 94
(19
 #";(cadena ( \"\\\"\"(or letter whitespace digit) (arbno (or whitespace"
 #" letter digit)) \"\\\"\") string)"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"caracter"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"\\'\""
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\'\""
0 0 24 3 2 #") "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globales"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"globales"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #")"
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"globals"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";Datos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numero"
0 0 24 3 1 #")"
0 0 14 3 7 #"num-lit"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 11 #"ref-var-exp"
0 0 24 3 1 #")"
0 0 17 3 29 #";; Solo a llamados en app-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"caracter"
0 0 24 3 2 #") "
0 0 14 3 10 #"caract-lit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"cadena"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #") "
0 0 14 3 10 #"cadena-lit"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #") "
0 0 14 3 15 #"expression-bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"x8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 6 #"numero"
0 0 24 3 1 #")"
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 13 #"list-base-oct"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";Definitions"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"var\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 11 #"dec-var-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"cons\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 12 #"dec-cons-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"unic\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 12 #"dec-unic-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"CVID-VALUE\""
0 0 24 3 2 #") "
0 0 14 3 11 #"cvidval-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"rec\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"rec-exp"
0 0 24 3 2 #") "
0 0 17 3 12 #";;letrec    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";Control structures"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 13 #"primitive-bin"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 15 #"primapp-exp-bin"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #";primapp-exp-bin ( exp prim-bin exp ) e.g. (7 * (4 + 2))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 15 #"primapp-exp-una"
0 0 24 3 1 #")"
0 0 17 3 4 #";Oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 44 #";primapp-exp-una (prim-unary exp) e.g. ++(8)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"prog\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";proc-exp(ids body)  e.g. prog($x): ($x * 3.1416)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 4 #"\"ev\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"app-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";app-exp (proc rands)  e.g.  ev($PI 2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"!\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-three"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 17 #"primapp-exp-three"
0 0 24 3 1 #")"
0 0 17 3 4 #";Oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"sequence\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 12 #"sequence-exp"
0 0 24 3 2 #") "
0 0 17 3 11 #";;Begin;oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"mod\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"->\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"set-exp"
0 0 24 3 1 #")"
0 0 17 3 9 #";;Set;oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ) "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"cond\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #") "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" )"
0 0 14 3 8 #"cond-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"done\""
0 0 24 3 2 #") "
0 0 14 3 9 #"while-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"toordownto"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"done\""
0 0 24 3 1 #")"
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 39 #"; for-exp(id num toordown compare body)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"toordownto"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"to\""
0 0 24 3 2 #") "
0 0 14 3 2 #"to"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"toordownto"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"downto\""
0 0 24 3 2 #") "
0 0 14 3 6 #"downto"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"list\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"list-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"vacia\""
0 0 24 3 2 #") "
0 0 14 3 14 #"list-vacia-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 7 #";Vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vecttor"
0 0 24 3 2 #") "
0 0 14 3 10 #"vector-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vecttor"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"vector\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #") "
0 0 14 3 8 #"lit-vect"
0 0 24 3 1 #")"
0 0 17 3 4 #";Oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"true\""
0 0 24 3 2 #") "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"false\""
0 0 24 3 2 #") "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"compare\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 13 #"comp-exp-bool"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 35 #";compare-exp-bool(exp predprim exp)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 14 3 15 #"op-bin-exp-bool"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 28 #";opbinbool (expbool expbool)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 12 #"oper-un-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 14 3 14 #"op-un-exp-bool"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"pred\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 18 #"predicado-exp-bool"
0 0 24 3 2 #") "
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 14 #";Register     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 27 #";regist (str exp strs exps)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 2 #") "
0 0 14 3 7 #"reg-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"registro"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"cadena"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"cadena"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #" )"
0 0 14 3 7 #"lit-reg"
0 0 24 3 1 #")"
0 0 17 3 5 #";;oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";Binary Primitives"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";for integer numbers"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 4 #"suma"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #") "
0 0 14 3 5 #"resta"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 6 #"multip"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 3 #"mod"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 3 #"div"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";for octal numbers"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"+oc\""
0 0 24 3 2 #") "
0 0 14 3 9 #"sumaoctal"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"~oc\""
0 0 24 3 2 #") "
0 0 14 3 10 #"restaoctal"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"*oc\""
0 0 24 3 2 #") "
0 0 14 3 10 #"multioctal"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #";for strings (cadena in lexica)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"concat\""
0 0 24 3 2 #") "
0 0 14 3 13 #"concat-cadena"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 13 #";for list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"append\""
0 0 24 3 2 #") "
0 0 14 3 11 #"append-list"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 13 #"\"crear-lista\""
0 0 24 3 2 #") "
0 0 14 3 9 #"cons-list"
0 0 24 3 1 #")"
0 0 17 3 3 #";ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 15 #";for vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"ref-vector\""
0 0 24 3 2 #") "
0 0 14 3 16 #"reference-vector"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";for reg-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"crear-reg\""
0 0 24 3 2 #") "
0 0 14 3 10 #"create-reg"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"primitive-bin"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"ref-reg\""
0 0 24 3 2 #") "
0 0 14 3 13 #"reference-reg"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";Unary Primitives"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";for integer numbers"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"++\""
0 0 24 3 2 #") "
0 0 14 3 4 #"add1"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"--\""
0 0 24 3 2 #") "
0 0 14 3 4 #"sub1"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";for octal numbers"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"++oc\""
0 0 24 3 1 #")"
0 0 14 3 7 #"add1oct"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"--oc\""
0 0 24 3 1 #")"
0 0 14 3 7 #"sub1oct"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #";for strings (cadena in lexica)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"len\""
0 0 24 3 2 #") "
0 0 14 3 7 #"len-cad"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 13 #";for list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"cab\""
0 0 24 3 2 #") "
0 0 14 3 3 #"cab"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"cola\""
0 0 24 3 2 #") "
0 0 14 3 4 #"cola"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"lista?\""
0 0 24 3 2 #") "
0 0 14 3 9 #"es-lista?"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"vacia?\""
0 0 24 3 2 #") "
0 0 14 3 9 #"es-vacia?"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 15 #";for vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"isvector?\""
0 0 24 3 2 #") "
0 0 14 3 8 #"vector-?"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 2 #" ("
0 0 19 3 14 #"\"crear-vector\""
0 0 24 3 2 #") "
0 0 14 3 13 #"create-vector"
0 0 24 3 1 #")"
0 0 17 3 3 #";Ok"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";for reg-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-unary"
0 0 24 3 2 #" ("
0 0 19 3 13 #"\"isregistro?\""
0 0 24 3 2 #") "
0 0 14 3 10 #"registro-?"
0 0 24 3 2 #") "
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";Trinary Primitives"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";for vectors"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-three"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"set-vector\""
0 0 24 3 2 #") "
0 0 14 3 13 #"setter-vector"
0 0 24 3 1 #")"
0 0 17 3 5 #";Ok--"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-three"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"set-reg\""
0 0 24 3 2 #") "
0 0 14 3 10 #"setter-reg"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #")"
0 0 14 3 8 #"menorque"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 3 #"\">\""
0 0 24 3 1 #")"
0 0 14 3 8 #"mayorque"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"<=\""
0 0 24 3 1 #")"
0 0 14 3 13 #"menorigualque"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 4 #"\">=\""
0 0 24 3 1 #")"
0 0 14 3 13 #"mayorigualque"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"==\""
0 0 24 3 1 #")"
0 0 14 3 5 #"igual"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"<>\""
0 0 24 3 1 #")"
0 0 14 3 9 #"diferente"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 4 #"$and"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 3 #"$or"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"xor\""
0 0 24 3 2 #") "
0 0 14 3 4 #"$xor"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"oper-un-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 4 #"$not"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"print\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 9 #"print-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"AMB\""
0 0 24 3 1 #")"
0 0 14 3 7 #"amb-exp"
0 0 24 3 1 #")"
0 0 17 3 4 #";oki"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;Construidos autom\303\241ticamente:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 3 1 #" "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 3 1 #" "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 93
(20
 #";;*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";;Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 77
(21
 #";;El FrontEnd (An\xC3\xA1lisis l\xC3\xA9xico (scanner) y sint\xC3\xA1"
 #"ctico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 3 1 #" "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 3 1 #" "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(22
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(23
 #";;;;;;;;;;;;;;;;;;;;;IMPLEMENTACION DEL INTERPRETADOR;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 86 22 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~>\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 21 #"especificacion-lexica"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 25 #"especificacion-gramatical"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"glob"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #" ) ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"eval-glob"
0 0 24 3 1 #" "
0 0 14 3 4 #"glob"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;Funcion eval glob"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; eval-glob <glob> <env> -> extend-env"
0 0 24 29 1 #"\n"
0 0 17 3 112
(24
 #";; Funcion que abre el datatype globales, hace cases a globals que pu"
 #"ede recibir una lista de ids y una lista de"
) 0 0 24 29 1 #"\n"
0 0 17 3 103
(25
 #";; expressions, la funci\xC3\xB3n examina si ya existe ese identifica"
 #"dor, sino extiende el ambiente glob-env."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-glob"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"glob"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"globales"
0 0 24 3 1 #" "
0 0 14 3 4 #"glob"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"globals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"eval-glob"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"No puedes tener variables globales duplicadas ~s \""
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 15 #"extend-env-glob"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 17 #"eval-rands-global"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 )"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"               ))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"eval-rands-global"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"empty-env"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;Funcion auxiliar para eval glob"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; findDuplicates? <lista> -> boolean?"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Busca si en la lista de ids hay identifiers repetidos."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"findDuplicates?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";Funcion auxiliar para dec-cons-exp"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";findWordReserved? <rands> -> boolean?"
0 0 24 29 1 #"\n"
0 0 17 3 89
(26
 #"; Busca si en los rands existe una variable declarada con la palabra "
 #"reservada CVID-VALUE"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"findWordReserved?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expval"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"CVID-VALUE\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"cases not supported for indirect target\""
0 0 24 3 16 #")               "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"examElements"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"examElements"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"num-lit"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 2 #")("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"CVID-VALUE\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 19 3 75
(27
 #"\"CVID-ERROR requirement violation:  You can't use unic var without b"
 #"ounded\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                       ))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";("
0 0 17 3 11 #"ref-var-exp"
0 0 17 3 2 #" ("
0 0 17 3 2 #"id"
0 0 17 3 2 #") "
0 0 17 3 9 #"apply-env"
0 0 17 3 8 #" env id)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"caract-lit"
0 0 24 3 1 #"("
0 0 14 3 8 #"caracter"
0 0 24 3 2 #") "
0 0 14 3 8 #"caracter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"cadena-lit"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cade"
0 0 24 3 2 #") "
0 0 14 3 4 #"cade"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"expression-bool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"exprbool"
0 0 24 3 3 #") ("
0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 8 #"exprbool"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 13 #"test-exprbool"
0 0 24 3 1 #" "
0 0 14 3 7 #"exptrue"
0 0 24 3 1 #" "
0 0 14 3 8 #"expfalse"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                              (("
0 0 14 3 10 #"value_bool"
0 0 24 3 2 #" ("
0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 13 #"test-exprbool"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 10 #"value_bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"exptrue"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"expfalse"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"cond-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"exprs-bool"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 13 #"eval-cond-exp"
0 0 24 3 1 #" "
0 0 14 3 10 #"exprs-bool"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 11 #"initexprnum"
0 0 24 3 1 #" "
0 0 14 3 6 #"action"
0 0 24 3 1 #" "
0 0 14 3 11 #"endexprenum"
0 0 24 3 1 #" "
0 0 14 3 8 #"body-for"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"init"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"initexprnum"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"end"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"endexprenum"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"act"
0 0 24 3 2 #" ("
0 0 14 3 9 #"apply-act"
0 0 24 3 1 #" "
0 0 14 3 6 #"action"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"clos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 14 3 8 #"body-for"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"apply-for"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"act"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"while-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"exprebool"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"exprebool->exp1"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 14 3 9 #"exprebool"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 13 #"comp-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 8 #"predprim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")  ))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"exprebool->exp2"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 14 3 9 #"exprebool"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 13 #"comp-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 8 #"predprim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"apply-while"
0 0 24 3 1 #" "
0 0 14 3 9 #"exprebool"
0 0 24 3 1 #" "
0 0 14 3 15 #"exprebool->exp1"
0 0 24 3 1 #" "
0 0 14 3 15 #"exprebool->exp2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"list-base-oct"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numero"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"esOctalValido?"
0 0 24 3 1 #" "
0 0 14 3 6 #"numero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 6 #"numero"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"list-base-oct"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 5 #"octal"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 5 #"valid"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"CVID"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"numero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"primapp-exp-bin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 3 #") ("
0 0 14 3 19 #"apply-primitive-bin"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"primapp-exp-una"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 3 #") ("
0 0 14 3 19 #"apply-primitive-una"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 17 3 4 #";;\302\254"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"primapp-exp-three"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand3"
0 0 24 3 3 #") ("
0 0 14 3 21 #"apply-primitive-three"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 74
(28
 #"                                                                     "
 #"    ("
) 0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 74 28 0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 74 28 0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand3"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 17 3 4 #";;\302\254"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"list-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           (("
0 0 14 3 7 #"lstexps"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 7 #"lstexps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"list-vacia-exp"
0 0 24 3 4 #" () "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"vector-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vexp"
0 0 24 3 3 #") ("
0 0 14 3 11 #"eval-vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 17 3 4 #";;\302\254"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"reg-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rexp"
0 0 24 3 3 #") ("
0 0 14 3 8 #"eval-reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cvidval-exp"
0 0 24 3 3 #"() "
0 0 19 3 11 #"\"CVID-VALUE"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"dec-var-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 18 #"eval-let-exp-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 14 #"extend-env-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"dec-cons-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 19 #"eval-cons-exp-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 7 #"declare"
0 0 19 3 1 #" "
0 0 19 3 9 #"duplicate"
0 0 19 3 1 #" "
0 0 19 3 9 #"constants"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 17 3 2 #";("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 12 #"examElements"
0 0 17 3 1 #" "
0 0 17 3 17 #"findWordReserved?"
0 0 17 3 1 #" "
0 0 17 3 4 #"args"
0 0 17 3 3 #") ("
0 0 17 3 10 #"eopl:error"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 4 #"\"You"
0 0 17 3 1 #" "
0 0 17 3 3 #"can"
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 7 #"declare"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 10 #"CVID-VALUE"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"constant"
0 0 17 3 12 #" declaration"
0 0 17 3 2 #"\")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"extend-env-cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               )"
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"dec-unic-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #")("
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 19 #"eval-cons-exp-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 7 #"declare"
0 0 19 3 1 #" "
0 0 19 3 9 #"duplicate"
0 0 19 3 1 #" "
0 0 19 3 9 #"constants"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"extend-env-unic"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 8 #"\"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 1 #" "
0 0 19 3 13 #"non-procedure"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"rec-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 22 #"extend-env-recursively"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"set-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"apply-set-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"sequence-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 3 #"acc"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"amb-exp"
0 0 24 3 4 #" () "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"print-exp"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"eval-expression"
0 0 19 3 1 #" "
0 0 19 3 3 #"Not"
0 0 19 3 6 #" Found"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(29
 #"; funciones auxiliares para aplicar eval-expression a cada elemento d"
 #"e una "
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; lista de operandos (expresiones)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"eval-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 34 #";(var-exp (id) (apply-env id env))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"ref-var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"indirect-target"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expval"
0 0 24 3 2 #") "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ref1"
0 0 24 3 2 #") "
0 0 14 3 4 #"ref1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"eval-let-exp-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 17 #"eval-let-exp-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"eval-let-exp-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"eval-cons-exp-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 18 #"eval-cons-exp-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"eval-cons-exp-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Funci\303\263n apply-primitive-bin"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";apply-primitive-bin <rand1 primbin rand3> -> <applyprimbin>"
0 0 24 29 1 #"\n"
0 0 17 3 92
(30
 #"; Recibe dos operandos previamente evaluados y aplica la operaci\xC3"
 #"\xB3n binaria que corresponda."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"apply-primitive-bin"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 7 #"primbin"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 13 #"primitive-bin"
0 0 24 3 1 #" "
0 0 14 3 7 #"primbin"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"multip"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"suma"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"resta"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"div"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"mod"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"sumaoctal"
0 0 24 3 4 #" ()("
0 0 14 3 9 #"sumaOctal"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"restaoctal"
0 0 24 3 5 #" () ("
0 0 14 3 10 #"restaOctal"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"multioctal"
0 0 24 3 3 #"()("
0 0 14 3 19 #"multiplicacionOctal"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"concat-cadena"
0 0 24 3 3 #"()("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"append-list"
0 0 24 3 3 #"()("
0 0 14 3 11 #"list-append"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"cons-list"
0 0 24 3 4 #"() ("
0 0 14 3 5 #"cons*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"reference-vector"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"reference-vector"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"CVID"
0 0 19 3 1 #" "
0 0 19 3 7 #"instead"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"be:"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 25 #")                        "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"create-reg"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"crear-registro"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"create-reg"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"CVID"
0 0 19 3 1 #" "
0 0 19 3 7 #"instead"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"be:"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"create-reg"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"CVID"
0 0 19 3 1 #" "
0 0 19 3 7 #"instead"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"be:"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"reference-reg"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"valid-reg?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 3 #") ("
0 0 14 3 12 #"registro-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"reference-reg"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"register"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"CVID"
0 0 19 3 1 #" "
0 0 19 3 7 #"instead"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"be:"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 25 #")                        "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"apply-primitive-bin"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 19 #"apply-primitive-bin"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 6 #" found"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Funci\303\263n apply-primitive-una"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";apply-primitive-una <primun rand> -> <applyprimun>"
0 0 24 29 1 #"\n"
0 0 17 3 88
(31
 #"; Recibe un operando previamente evaluado y aplica la operaci\xC3\xB3"
 #"n unaria que corresponda."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"apply-primitive-una"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"primun"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-unary"
0 0 24 3 1 #" "
0 0 14 3 6 #"primun"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"add1"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"sub1"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"len-cad"
0 0 24 3 5 #" () ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"cab"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cola"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"es-lista?"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"es-vacia?"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"vector-?"
0 0 24 3 5 #" () ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"create-vector"
0 0 24 3 5 #" () ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"add1oct"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"successor"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"sub1oct"
0 0 24 3 5 #" () ("
0 0 14 3 11 #"predecessor"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"registro-?"
0 0 24 3 5 #" () ("
0 0 14 3 10 #"valid-reg?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n apply-primitive-three"
0 0 24 29 1 #"\n"
0 0 17 3 70
(32
 #";apply-primitive-three <primthr rand1 rand2 rand3> -> <applyprimthree"
 #">"
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(33
 #"; Recibe tres operandos previamente evaluados y aplica la operaci\xC3"
 #"\xB3n trinaria que corresponda."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"apply-primitive-three"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"primthr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-three"
0 0 24 3 1 #" "
0 0 14 3 7 #"primthr"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"setter-vector"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 3 #") ("
0 0 14 3 13 #"eval-set-vect"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"setter-vector"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"This should be a vector in CVID instead to be: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 25 #")                        "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"setter-reg"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"valid-reg?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-set-reg"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"setter-reg"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"This should be a register in CVID instead to be: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 24 3 25 #")                        "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Funci\303\263n auxiliar eval-vector"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";eval-vector <vexp env> -> vector"
0 0 24 29 1 #"\n"
0 0 17 3 61
(34
 #"; Eval\xC3\xBAa la expresi\xC3\xB3n dada en el ambiente y crea el vec"
 #"tor."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"eval-vector"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecttor"
0 0 24 3 1 #" "
0 0 14 3 4 #"vexp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"lit-vect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 19 #")                  "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ev-lexp"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";Funci\303\263n auxiliar eval-set-vect"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";eval-set-vect <rand1 rand2 rand3> -> <none>"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Recibe el vector, la posici\303\263n y el valor y setea el vector."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-set-vect"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";Funci\303\263n auxiliar eval-reg"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";eval-reg <rexp env> -> registro"
0 0 24 29 1 #"\n"
0 0 17 3 63
(35
 #"; Eval\xC3\xBAa la expresi\xC3\xB3n dada en el ambiente y crea el reg"
 #"istro."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"lit-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"lstr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"flst"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 4 #"lstr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    )"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 1 #" "
0 0 14 3 4 #"flst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"eval-reg"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Register should not have duplicated keys\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"flst"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"lexps"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"ev-lexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          )"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 5 #"lexps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                       )                     "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     )"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                   ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Funci\303\263n auxiliar ev-lexp"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";ev-lexp <lexp env> -> listevaluada"
0 0 24 29 1 #"\n"
0 0 17 3 75
(36
 #"; Eval\xC3\xBAa la lista dada en el ambiente, elemento por elemento y"
 #" la retorna."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"ev-lexp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"lev"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 4 #"lexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"lev"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";Funci\303\263n auxiliar crear-registro"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";crear-registro <rand1 rand2> -> registro"
0 0 24 29 1 #"\n"
0 0 17 3 57
#"; Recibe dos listas y con ellas crea un registro v\303\241lido."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"crear-registro"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string-list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #")"
0 0 17 3 39 #";;add findDuplicates? ; add same length"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"findDuplicates?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"crear-registro"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"String list should not have duplicated keys: ~s\""
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"crear-registro"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Both lists should have the same length\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                ))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"crear-registro"
0 0 24 3 1 #" "
0 0 19 3 56
#"\"This should be a string list in CVID instead to be: ~s\""
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar string-list?"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";string-list? <list> -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Recibe una lista y valida si es una lista de strings."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"string-list?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"string-list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Funci\303\263n auxiliar valid-reg?"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";valid-reg? <registro> -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 58
(37
 #"; Recibe una registro y eval\xC3\xBAa si es un registro v\xC3\xA1lido"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"valid-reg?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar registro-ref"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";registro-ref <rand1 rand2> -> <none>"
0 0 24 29 1 #"\n"
0 0 17 3 84
(38
 #"; Recibe el registro y la llave y retorna el valor del elemento asoci"
 #"ado a la llave."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"registro-ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar eval-set-reg"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";eval-set-reg <rand1 rand2 rand3> -> <none>"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Recibe el registro, la llave y el valor y setea el registro."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-set-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Funci\303\263n eval-expression-bool"
0 0 24 29 1 #"\n"
0 0 17 3 97
(39
 #";Usage: Funci\xC3\xB3n que abre el datatype expr-bool y regresa lo pe"
 #"rtinente a cada expresion booleana"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; eval-expr-bool <expr-bool> -> boolean?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"eval-expression-bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 7 #"expbool"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 14 3 7 #"expbool"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"true-exp"
0 0 24 3 4 #" () "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"false-exp"
0 0 24 3 4 #" () "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"comp-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 8 #"predprim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"apply-predprim"
0 0 24 3 1 #" "
0 0 14 3 8 #"predprim"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"op-bin-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 9 #"opbinbool"
0 0 24 3 1 #" "
0 0 14 3 8 #"expbool1"
0 0 24 3 1 #" "
0 0 14 3 8 #"expbool2"
0 0 24 3 3 #") ("
0 0 14 3 17 #"apply-op-bin-bool"
0 0 24 3 1 #" "
0 0 14 3 9 #"opbinbool"
0 0 24 3 2 #" ("
0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 8 #"expbool1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(40
 #"                                                                     "
 #"            ("
) 0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 8 #"expbool2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"op-un-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"opunbool"
0 0 24 3 1 #" "
0 0 14 3 4 #"expb"
0 0 24 3 3 #") ("
0 0 14 3 20 #"apply-op-un-exp-bool"
0 0 24 3 1 #" "
0 0 14 3 8 #"opunbool"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 4 #"expb"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"predicado-exp-bool"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Funci\303\263n apply-predprim"
0 0 24 29 1 #"\n"
0 0 17 3 87
(41
 #";Usage: Funcion que dependiendo de rator predicado devuelve el boolea"
 #"no correspondiente"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";apply-predprim <pred> * <exp1> * <exp2> -> boolean?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"apply-predprim"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"mayorque"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 3 #" ( "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"menorque"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"menorigualque"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"mayorigualque"
0 0 24 3 4 #" ()("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"igual"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"diferente"
0 0 24 3 6 #" () ( "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"End cases of apply-predprim\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Funcion apply-op-bin-bool"
0 0 24 29 1 #"\n"
0 0 17 3 94
(42
 #";Usage: Funcion que dependiendo de un oper-bin-bool y dos expression-"
 #"bool devuelve un booleano"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(43
 #";apply-op-bin-bool <opbinbool> * <expr-bool> * <expr-bool> -> boolean"
 #"?"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"apply-op-bin-bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"opbinbool"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 1 #" "
0 0 14 3 9 #"opbinbool"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"$and"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"$or"
0 0 24 3 6 #" ()  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"$xor"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"fin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"apply-op-un-exp-bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"opnot"
0 0 24 3 1 #" "
0 0 14 3 4 #"expb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 12 #"oper-un-bool"
0 0 24 3 1 #" "
0 0 14 3 5 #"opnot"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"$not"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"expb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Funcion que aplica un set-exp"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";apply-set-exp id rhs-exp env -> newvalue?"
0 0 24 29 1 #"\n"
0 0 17 3 99
(44
 #";Se hizo una funcion independiente para que verificara el estado de u"
 #"na referencia antes de setear."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-set-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"glob\""
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rec\""
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"unic\""
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ligada\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mod"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"You can't modify an unic declaration bound\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"You can't modify an constant declaration\""
0 0 24 3 7 #")])))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expbools"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"lbools"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 20 #"eval-expression-bool"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 8 #"expbools"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 6 #"lbools"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #") "
0 0 14 3 3 #"pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 70
(45
 #";;Funcion que aplica cases a toordownto y devuelve una cadena de text"
 #"o"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";;apply-act <datatype toordownto> -> string?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-act"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"action"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"toordownto"
0 0 24 3 1 #" "
0 0 14 3 6 #"action"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"to"
0 0 24 3 4 #" () "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"downto"
0 0 24 3 4 #" () "
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 144
(46
 #";Funcion que evalua un for, evaluando una cerradura que contiene el i"
 #"d que es declarado al inicio del for el cuerpo del for y el ambiente "
 #"actual"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(47
 #";<apply-for>: <number> <number> <datatype toordownto> <closure> -> cl"
 #"osure evaluada"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-for"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"act"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"direct-target"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"direct-target"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"apply-for"
0 0 24 3 2 #" ("
0 0 14 3 3 #"act"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"act"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"apply-while"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"apply-while"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(48
 #";********************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";Ambientes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"extended-env-glob"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"extended-env-var"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"extended-env-cons"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"extended-env-unic"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 10 #")))       "
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 24 29 1 #"\n"
0 0 17 3 78
(49
 #";extend-env-glob: <list-of symbols> <list-of numbers> enviroment -> e"
 #"nviroment"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
(50
 #";funci\xC3\xB3n que crea un ambiente extendido para variables globale"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"extend-env-glob"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"extended-env-glob"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 77
(51
 #";extend-env-var: <list-of symbols> <list-of numbers> enviroment -> en"
 #"viroment"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";funci\303\263n que crea un ambiente extendido para variables var"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"extend-env-var"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"extended-env-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 81
(52
 #";extend-env-cons: <list-of symbols> <list-of numbers> environmente ->"
 #" environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";funcion que crea un ambiente extendido para variables cons"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"extend-env-cons"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"extended-env-cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 82
(53
 #";extend-env-unic: <list-of symbols> <list-of numbers> environmente ->"
 #" environment?"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";Funcion que crea un ambiente extendido para variables unic"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"extend-env-unic"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"extended-env-unic"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119
(54
 #";extend-env-recursively: <list-of symbols> <list-of <list-of symbols>"
 #"> <list-of expressions> environment -> environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(55
 #";funci\xC3\xB3n que crea un ambiente extendido para procedimientos re"
 #"cursivos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"extend-env-recursively"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"vec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 13 #"direct-target"
0 0 24 3 1 #"("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"iota"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";iota: number -> list"
0 0 24 29 1 #"\n"
0 0 17 3 65
(56
 #";funci\xC3\xB3n que retorna una lista de los n\xC3\xBAmeros desde 0 h"
 #"asta end"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"iota"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(define iota"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (lambda (end)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    (iota-aux 0 end)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(define iota-aux"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  (lambda (ini fin)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";    (if (>= ini fin)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";        ()"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";        (cons ini (iota-aux (+ 1 ini) fin)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46
#";funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"dere"
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 26 #";(apply-env-ref env sym)))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";env))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-env-ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"extended-env-glob"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"glob\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"extended-env-var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"extended-env-cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cons\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"extended-env-unic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 5 #"valid"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"CVID-VALUE\""
0 0 24 3 2 #")("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"unic\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ligada\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                    ))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 7 #"invalid"
0 0 24 3 3 #") ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"invalid\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rec\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(57
 #";********************************************************************"
 #"***"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";Closure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 8 #"procval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"closure"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(58
 #";apply-procedure: evalua el cuerpo de un procedimientos en el ambient"
 #"e extendido correspondiente"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 14 #"extend-env-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92 48 0 0 24 29 1 #"\n"
0 0 17 3 45 #";Definition of datatypes target and reference"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"target?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 21 #"ref-to-direct-target?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"estado"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"symbolref?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"ref-var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"The symbol ref error\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"ref-to-direct-target?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"reference?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"est"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expval"
0 0 24 3 2 #") "
0 0 14 3 6 #"expval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ref1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expval"
0 0 24 3 2 #") "
0 0 14 3 6 #"expval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"deref"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 19 3 23 #"\"Illegal reference: ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"est"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"direct-target"
0 0 24 3 2 #" ("
0 0 14 3 7 #"expval1"
0 0 24 3 2 #") "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"indirect-target"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ref1"
0 0 24 3 2 #") "
0 0 14 3 4 #"ref1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"primitive-setref!"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"direct-target"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"primitive-setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"est"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(59
 #";********************************************************************"
 #"********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";Funciones Auxiliares"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(60
 #"; funciones auxiliares para encontrar la posici\xC3\xB3n de un s\xC3"
 #"\xADmbolo"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; en la lista de s\303\255mbolos de un ambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(61
 #";********************************************************************"
 #"**********************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(62
 #";Funcion que ayuda a denotar si un octal es validamente bien represen"
 #"tado."
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";(esOctalValido? list) -> boolean?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"esOctalValido?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"esOctalValido?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;;;;;;;;;;;;;;;;INTERFACES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";Implementaci\303\263n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Representacion: Definicion de funciones para representaci\303\263n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";de numeros grandes (Bignum) de cualquier base: 8,16,32.;;;"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(63
 #";;Usage:Definicion de la base a utilizar, para nuestro lenguaje CVID "
 #"es 8"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;zero"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Usage: Lista vacia que representa el cero "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;is-zero?"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;Usage: Predicado que de zero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"is-zero?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;successor: list -> list"
0 0 24 29 1 #"\n"
0 0 17 3 83
(64
 #";;usage: Procedimiento que recibe una lista con numeros, y regresa un"
 #"a lista con el"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(65
 #";;numero siguiente de la base que se este trabajando. El procedimient"
 #"o aumenta una unidad"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(66
 #";;a la cabeza de la lista hasta llegar a la base menos 1, hace el lla"
 #"mado recursivo"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";;y continua con el resto de la lista."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"successor"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #"="
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"("
0 0 14 3 9 #"successor"
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;predecessor: list -> list"
0 0 24 29 1 #"\n"
0 0 17 3 82
(67
 #";;Usage: Procedimiento que recibe una lista con numeros, y disminuye "
 #"una unidad la"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(68
 #";;cabeza de la lista, si la cabeza ya es 0, construye el numero 32, y"
 #" hace el llamado"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;recursivo con el resto de la lista."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"predecessor"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"predecessor"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 56
#";;;;;;;;C\303\223DIGO CLIENTE: Operaciones sobre datos octales"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"sumaOctal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"y"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"successor"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sumaOctal"
0 0 24 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"restaOctal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"predecessor"
0 0 24 3 2 #" ("
0 0 14 3 10 #"restaOctal"
0 0 24 3 2 #"  "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"multiplicacionOctal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"zero"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"sumaOctal"
0 0 24 3 2 #" ("
0 0 14 3 19 #"multiplicacionOctal"
0 0 24 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;;;;;;;PRIMITIVES FOR LIST;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";list-append: list1 list2 -> list"
0 0 24 29 1 #"\n"
0 0 17 3 93
(69
 #";usage: Procedimiento que recibe dos listas y regresa una concatenaci"
 #"on de esas dos listas en"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";una nueva lista."
0 0 24 29 1 #"\n"
0 0 17 3 28 #";<list-append> :=  (<list2>)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";              := (<list1> (<list-append> <list1 <list2>))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"list-append"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"list-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";cons: scheme-value scheme-value ->list"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";usage: Procedimiento que recibe dos elementos y regresa una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 5 #"cons*"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;PRUEBAS"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";----------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Pruebas de datos"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";----------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";a-program(globales expression)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"($x = 2;$y = 6;)$t\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de globals"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"($x = \\\"Hola\\\";$y = 6;)$num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de caracter"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"()'c'\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Prueba de <bool>"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"() true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"()false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";Prueba de octal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"()x8(4 3 2 1)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";--------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";Estructuras de control"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Prueba de primapp-exp-bin"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"()(4+3)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"()(2 * (7 ~(4+3)))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";Prueba de primapp-exp-bin para multioctal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"()(x8(5 6 4 7) *oc x8(5 2 1 4))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";Prueba de primapp-exp-bin para sumaoctal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"()(x8(5 6 0 7) +oc x8(5 2 1 4))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";Prueba de primapp-exp-bin para restaoctal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"()(x8(3 6 2 0) *oc (x8(5 6 2 7) ~oc x8(5 2 1 4)))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";Prueba de primapp-exp-bin para concat-cadena"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"()(\\\"Hola\\\" concat \\\"Mundo\\\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de sequence"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"() sequence var $x = 2 $y = 3 in $x end \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de set-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"() mod $z -> 9 \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Prueba de if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"() if compare( 5 > 2 ) then 4  else 2  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"() cond [true 6] else 5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"($f=7; $g=9; $r=0;) cond [true 6][false 1] else 5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 74
(70
 #"\"($f=7; $g=9; $r=0;) cond [compare(5 <> 7) $a] [compare(8 <= 1) 0] e"
 #"lse 5\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";Prueba de while-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"() while compare($x < 1) do (4 + 2) done \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"($a=7;) for $i=0 to 2 do print(($a * 2)) done\""
0 0 24 3 2 #") "
0 0 17 3 24 #";for(i=0;2;...) ev(body)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 56
#"\"() var $y = 0 in for $x=0 to 5 do print(($x * 2)) done\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Prueba de primapp-exp-una"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Para enteros"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"() ++(2)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"() --(++(2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Para octales"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"() ++oc(x8(2 0 5 6 07))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"() --oc(++oc(x8(2 0 5 6 07)))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Para cadena"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"() len(\\\"IsRight\\\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Prueba de primapp-exp-bin y primapp-exp-una"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"() ( 8 + len(\\\"IsRight\\\"))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de proc-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"() prog($x $y): x8(2 3 6 7)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de app-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 88
(71
 #"\"() var $PI = prog($x): ($x * 3.1416) $x = x8(7 0 6 1) $saludo = \\"
 #"\"Hola\\\" in ev ($PI 2)\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de exp-bool"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"() compare ( 4 < 6 )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"() and ( compare (4 <= 5), compare (3 <> 2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"() xor ( compare (4 <= 5),compare (3 <> 2)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"() or( compare (4 <= 5), compare (3 <> 2)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"() not (true)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"() list (4 6 5 8 9) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"() cab(list (4 6 5 8 9))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"() cola(list (4 6 5 8 9)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"() lista?(list (4 6 5 8 9))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"() vacia?(list (4 6 5 8 9))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"() vacia?(list (vacia)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"() (8 crear-lista list (vacia)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de reg-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 47
#"\"() {\\\"x\\\" = 9; \\\"y\\\"= 0; \\\"m\\\" = \\\" casa \\\"} \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52
#"\"() (list(\\\"a\\\" \\\"b\\\") crear-reg list(5 \\\"coco\\\")) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 60
(72
 #"\"() isregistro?({\\\"x\\\" = 9; \\\"y\\\"= 0; \\\"m\\\" = \\\" casa "
 #"\\\"}) \""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
(73
 #"\"() ({\\\"x\\\" = 9; \\\"y\\\"= 0; \\\"m\\\" = \\\" casa \\\"}ref-re"
 #"g \\\"y\\\") \""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 68
(74
 #"\"() !(set-reg {\\\"x\\\" = 9; \\\"y\\\"= 0; \\\"m\\\" = \\\" casa \\"
 #"\"} \\\"m\\\" -10) \""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";Prueba de vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"() vector[4;5;6;7]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"() isvector?(vector[4;5;6;7])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"() crear-vector(7) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"() (vector[2;5] ref-vector 1) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"() !(set-vector vector[3;5] 6 2 ) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Declaraciones"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";Prueba de dec-var-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"() var $PI = prog(): 3.1416 in $PI \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 72
(75
 #"\"() var $PI = prog(): 3.1416 $x = x8(7 0 6 1) $saludo = \\\"Hola\\\""
 #" in $PI\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";Prueba dec-cons-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"() cons $x = 6 in $x \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Prueba de rec-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"() rec $suma($x,$y) = ($x + $y) in ev($suma 2 3)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"()"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"rec"
0 0 19 29 1 #"\n"
0 0 19 3 70
(76
 #"$f($n,$m) = if compare($n == 0) then ($m + ev($f ($n ~ 1) $m )) else "
 #"0"
) 0 0 19 29 1 #"\n"
0 0 19 3 2 #"in"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"ev($f 2 3)"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";Prueba de dec-unic-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"()unic $a = 6 $z = 2 in $a \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Prueba de prin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"() print($x) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;======Pruebas adicionales ======="
0 0 24 29 1 #"\n"
0 0 17 3 65
#";Prueba de globals, dec-var-exp, sequence-exp, set-exp, print-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"($x = 5; $y = 3;) var $z = 4 in"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"sequence"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"mod $x->$z;"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"mod $z ->9;"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"print($x);"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"print($z)"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"e"
0 0 19 3 2 #"nd"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 82
(77
 #";Prueba funci\xC3\xB3n que calcula el factorial de una lista de valor"
 #"es desde 1 hasta 10"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#"; retorna una lista con los respectivos valores del factorial"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";utiliza rec, cond, compare, ev, pred"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"() rec"
0 0 19 29 1 #"\n"
0 0 19 3 48 #"$fact($n) = cond [compare($n == 0) 1] else ($n *"
0 0 19 3 20 #" ev($fact ($n ~ 1)))"
0 0 19 29 1 #"\n"
0 0 19 3 99
(78
 #"$lfact($l) = cond [pred(vacia?($l)) vacia] else (ev($fact cab($l)) cr"
 #"ear-lista ev($lfact cola($l)))"
) 0 0 19 29 1 #"\n"
0 0 19 3 2 #"in"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"ev($lfact list(1 2 3 4 5 6 7 8 9 10))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
(79
 #";Prueba funci\xC3\xB3n que recibe una lista y una funci\xC3\xB3n o pr"
 #"edicado"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(80
 #"; devuelve una lista con los elementos que cumplan con ese predicado "
 #"dado."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"()"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"rec"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"$fil($p,$l) = if pred(vacia? ($l))"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"                 then  vacia"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                   else"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                       if pred(ev($p cab($l)))"
0 0 19 29 1 #"\n"
0 0 19 3 74
(81
 #"                           then (cab($l) crear-lista ev($fil $p cola("
 #"$l)))"
) 0 0 19 29 1 #"\n"
0 0 19 3 54 #"                             else ev($fil $p cola($l))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"in"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"ev($fil prog($n):compare ($n > 5) list(1 2 3 4 5 6 7 8 9))"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 9        5305 21           0 0           0 883 0 17 3 20
#";;Pruebas Taller # 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 8 #";Punto 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 60
#";Procedimiento que cuenta el numero de sublistas que existen"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 13 #";en una lista"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"$subl"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"$aux"
0 0 24 3 1 #"("
0 0 14 3 2 #"$i"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"$li"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 2 #"$i"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"lista?"
0 0 24 3 1 #"("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 4 #"$aux"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$i"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 2 #") "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 4 #"$aux"
0 0 24 3 1 #" "
0 0 14 3 2 #"$i"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 4 #"$aux"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 2 #"$l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$subl"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 8 #";Punto 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 52 #";Procedimiento que intercambia de posicion un par de"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 56 #";elementos de una lista que a su vez estan en una lista."
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 16 #"$inversionlistas"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ["
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")) "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 3 #" (("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"cab"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$l"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"crear-lista"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"cab"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")) "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 3 #")) "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 16 #"$inversionlistas"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 16 #"$inversionlistas"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"b\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 8 #";Punto 4"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 108
(82
 #";;Usage: Procedimiento que recibe una lista una posici\xC3\xB3n n y u"
 #"n valor x, regresa una lista L con el valor x"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 29 #";;en la posici\303\263n n indicada."
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 58
#";;<situar-en-lista> := (<cvid-scheme-value-x> (rest-list))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 55 #";;                  := (<first-list> <situar-en-lista>)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 14 #"$situarenlista"
0 0 24 3 1 #"("
0 0 14 3 2 #"$L"
0 0 28 3 1 #","
0 0 14 3 2 #"$n"
0 0 28 3 1 #","
0 0 14 3 2 #"$x"
0 0 24 3 1 #")"
0 0 14 3 1 #"="
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 7 #"compare"
0 0 24 3 1 #"("
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #"$x"
0 0 24 3 1 #" "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 2 #"$L"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 2 #"$L"
0 0 24 3 2 #") "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 14 #"$situarenlista"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 2 #"$L"
0 0 24 3 3 #") ("
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 1 #"~"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"$x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 14 #"$situarenlista"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Mitad\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 8 #";Punto 6"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 101
(83
 #";Procedimiento que recibe un P y una Lista, el procedimiento regresa "
 #"la posici\xC3\xB3n del primer elemento"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 108
(84
 #";que satisface el predicado, en caso de no encontrar un predicado ver"
 #"dadero, el procedimiento regresa falso."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"$iList"
0 0 24 3 1 #"("
0 0 14 3 2 #"$p"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"$l"
0 0 24 3 1 #")"
0 0 14 3 1 #"="
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"$func"
0 0 24 3 1 #"("
0 0 14 3 2 #"$n"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"$pr"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"$li"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 3 #"$pr"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$func"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"$pr"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"$li"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$func"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 2 #"$p"
0 0 24 3 1 #" "
0 0 14 3 2 #"$l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 6 #"$iList"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #"("
0 0 14 3 2 #"$x"
0 0 24 3 1 #")"
0 0 14 3 8 #":compare"
0 0 24 3 2 #" ("
0 0 14 3 2 #"$x"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 8 #";Punto 9"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 101
(85
 #";Procedimiento que recibe dos listas y regresa el producto cartesiano"
 #" entre cada uno de los elementos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 12 #";de la lista"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"$auxC"
0 0 24 3 1 #"("
0 0 14 3 2 #"$x"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"$l"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 2 #"$x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")) "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$auxC"
0 0 24 3 1 #" "
0 0 14 3 2 #"$x"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 2 #"$l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"$product"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"$l2"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$auxC"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 2 #") "
0 0 14 3 3 #"$l2"
0 0 24 3 2 #") "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 8 #"$product"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 2 #") "
0 0 14 3 3 #"$l2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 8 #"$product"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"x\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 9 #";Punto 11"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 38 #";Funcion que hace append a dos listas "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"$list1"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 17 3 23 #";$list2 = list(8 5 9);)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"$lap"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 28 3 1 #","
0 0 14 3 3 #"$l2"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #"("
0 0 14 3 6 #"vacia?"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 3 #"$l2"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 2 #") "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 4 #"$lap"
0 0 24 3 1 #" "
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 3 #"$l1"
0 0 24 3 2 #") "
0 0 14 3 3 #"$l2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 4 #"$lap"
0 0 24 3 1 #" "
0 0 14 3 6 #"$list1"
0 0 24 3 1 #" "
0 0 14 3 6 #"$list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 9 #";Punto 14"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 78
(86
 #";Procedimiento que recibe un numero n y un arbol binario de busqueda "
 #"y regresa"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 47 #";una lista con la ruta donde esta ubicado el n."
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 15 3 3 #"rec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"$path"
0 0 24 3 1 #"("
0 0 14 3 2 #"$n"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 4 #"$abb"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 1 #"("
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 4 #"$abb"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 1 #"("
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 4 #"$abb"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$path"
0 0 24 3 1 #" "
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 4 #"$abb"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 14 3 11 #"crear-lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$path"
0 0 24 3 1 #" "
0 0 14 3 2 #"$n"
0 0 24 3 1 #" "
0 0 14 3 3 #"cab"
0 0 24 3 1 #"("
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 4 #"cola"
0 0 24 3 1 #"("
0 0 14 3 4 #"$abb"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #"("
0 0 14 3 5 #"$path"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 3 #")) "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 1 #" "
0 0 14 3 5 #"vacia"
0 0 24 3 4 #"))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"interpretador"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
